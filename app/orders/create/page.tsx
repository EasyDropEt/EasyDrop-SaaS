'use client';

import { ProtectedRoute } from '@/components/auth/ProtectedRoute';
import { useBusinessContext } from '@/context/BusinessContext';
import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useOrders } from '@/hooks/useOrders';
import { ValidationError } from '@/domain/errors/AppError';
import { motion } from 'framer-motion';
import { ClipLoader } from 'react-spinners';
import { LocationPicker, SelectedLocation } from '@/components/common/LocationPicker';

const fadeIn = {
  hidden: { opacity: 0 },
  visible: { 
    opacity: 1,
    transition: { 
      duration: 0.6 
    }
  }
};

const fadeInUp = {
  hidden: { opacity: 0, y: 20 },
  visible: { 
    opacity: 1, 
    y: 0,
    transition: { 
      duration: 0.5 
    }
  }
};

interface OrderFormData {
  customer_first_name: string;
  customer_last_name: string;
  customer_email: string;
  customer_phone: string;
  delivery_address: string;
  delivery_city: string;
  delivery_postal_code: string;
  delivery_country: string;
  latitude: number;
  longitude: number;
  parcel_size: 'small' | 'medium' | 'large';
  parcel_weight: string;
  is_fragile: boolean;
  delivery_notes: string;
}

export default function CreateOrderPage() {
  const { business } = useBusinessContext();
  const { createBatchOrders, createOrder, loading } = useOrders();
  const router = useRouter();
  const [generalError, setGeneralError] = useState('');
  
  const [formData, setFormData] = useState<OrderFormData>({
    customer_first_name: '',
    customer_last_name: '',
    customer_email: '',
    customer_phone: '',
    delivery_address: '',
    delivery_city: '',
    delivery_postal_code: '',
    delivery_country: '',
    latitude: 0,
    longitude: 0,
    parcel_size: 'small',
    parcel_weight: '',
    is_fragile: false,
    delivery_notes: ''
  });
  
  const [errors, setErrors] = useState<Record<string, string>>({});
  
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    const newValue = type === 'checkbox' ? (e.target as HTMLInputElement).checked : value;
    
    setFormData((prev) => ({
      ...prev,
      [name]: newValue
    }));
    
    // Clear error for this field when user types
    if (errors[name]) {
      setErrors((prev) => {
        const newErrors = { ...prev };
        delete newErrors[name];
        return newErrors;
      });
    }
  };
  
  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};
    
    const requiredFields = [
      'customer_first_name',
      'customer_last_name',
      'customer_email',
      'customer_phone',
      'delivery_address',
      'delivery_city',
      'delivery_postal_code',
      'delivery_country',
      'parcel_weight'
    ];
    
    requiredFields.forEach((field) => {
      const value = formData[field as keyof typeof formData];
      if (!value || (typeof value === 'string' && value.trim() === '')) {
        newErrors[field] = 'This field is required';
      }
    });
    
    // Email validation
    if (formData.customer_email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.customer_email)) {
      newErrors.customer_email = 'Please enter a valid email address';
    }
    
    // Phone validation (simple check)
    if (formData.customer_phone && !/^\+?[0-9() -]{8,}$/.test(formData.customer_phone)) {
      newErrors.customer_phone = 'Please enter a valid phone number';
    }
    
    // Weight validation (must be a number)
    if (formData.parcel_weight) {
      const weight = parseFloat(formData.parcel_weight);
      if (isNaN(weight) || weight <= 0) {
        newErrors.parcel_weight = 'Please enter a valid weight';
      }
    }
    
    // Latitude & Longitude validation specific to Addis (optional)
    if (formData.latitude < 8.8 || formData.latitude > 9.1) {
      newErrors.latitude = 'Latitude must be between 8.8 and 9.1 for Addis Ababa';
    }
    if (formData.longitude < 38.6 || formData.longitude > 39.0) {
      newErrors.longitude = 'Longitude must be between 38.6 and 39.0 for Addis Ababa';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    if (!business?.id) {
      setGeneralError('Your business account information is not available. Please log in again.');
      return;
    }
    
    setGeneralError('');
    
    try {
      // Transform the form data to match the Order entity structure
      const orderData = {
        consumer: {
          id: '', // Will be generated by the backend
          first_name: formData.customer_first_name,
          last_name: formData.customer_last_name,
          phone_number: formData.customer_phone,
          email: formData.customer_email,
          active_status: true,
          notification_ids: {
            items: []
          },
          location: {
            address: formData.delivery_address,
            postal_code: formData.delivery_postal_code,
            city: formData.delivery_city,
            country: formData.delivery_country,
            latitude: formData.latitude,
            longitude: formData.longitude,
          },
        },
        bill_id: '', // Will be generated by the backend
        latest_time_of_arrival: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now
        parcel: {
          id: '', // Will be generated by the backend
          size: formData.parcel_size,
          weight: parseFloat(formData.parcel_weight),
          fragile: formData.is_fragile,
          dimensions: {
            length: 10, // Default values as we don't have fields for these
            width: 10,
            height: 10
          },
          price: 0, // Default price, will be calculated by backend
          createdAt: new Date(),
          updatedAt: new Date()
        },
        status: 'PENDING' as const,
        delivery_job_id: '', // Will be generated by the backend
        notes: formData.delivery_notes
      };
      
      const result = await createOrder(orderData);
      
      if (result) {
        router.push(`/orders/${result.id}`);
      } else {
        throw new Error('Failed to create order');
      }
    } catch (error) {
      console.error('Order creation error:', error);
      if (error instanceof ValidationError) {
        setGeneralError(error.message);
      } else if (error instanceof Error) {
        setGeneralError(error.message);
      } else {
        setGeneralError('An unexpected error occurred. Please try again.');
      }
    }
  };
  
  return (
    <ProtectedRoute>
      <motion.div 
        initial="hidden"
        animate="visible"
        variants={fadeIn}
        className="container mx-auto py-12 px-4"
      >
        <motion.div 
          variants={fadeInUp}
          className="mb-8"
        >
          <h1 className="text-3xl font-bold text-dark-900 dark:text-white mb-2">Create New Order</h1>
          <p className="text-dark-600 dark:text-light-400">
            Fill in the details below to create a new delivery order
          </p>
        </motion.div>
        
        {generalError && (
          <motion.div 
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            className="bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 p-4 rounded-lg mb-6"
          >
            {generalError}
          </motion.div>
        )}
        
        <motion.div 
          variants={fadeInUp}
          className="card overflow-hidden"
        >
          <form onSubmit={handleSubmit} className="p-6">
            <div className="mb-8">
              <h2 className="text-xl font-semibold text-dark-900 dark:text-white mb-4">Customer Information</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label htmlFor="customer_first_name" className="block text-sm font-medium text-dark-700 dark:text-light-300 mb-2">First Name *</label>
                  <input
                    type="text"
                    id="customer_first_name"
                    name="customer_first_name"
                    value={formData.customer_first_name}
                    onChange={handleChange}
                    className={`input ${
                      errors.customer_first_name ? 'border-red-300 dark:border-red-500 focus:border-red-500 focus:ring-red-500' : ''
                    }`}
                  />
                  {errors.customer_first_name && (
                    <p className="mt-1 text-sm text-red-600 dark:text-red-400">{errors.customer_first_name}</p>
                  )}
                </div>
                
                <div>
                  <label htmlFor="customer_last_name" className="block text-sm font-medium text-dark-700 dark:text-light-300 mb-2">Last Name *</label>
                  <input
                    type="text"
                    id="customer_last_name"
                    name="customer_last_name"
                    value={formData.customer_last_name}
                    onChange={handleChange}
                    className={`input ${
                      errors.customer_last_name ? 'border-red-300 dark:border-red-500 focus:border-red-500 focus:ring-red-500' : ''
                    }`}
                  />
                  {errors.customer_last_name && (
                    <p className="mt-1 text-sm text-red-600 dark:text-red-400">{errors.customer_last_name}</p>
                  )}
                </div>
                
                <div>
                  <label htmlFor="customer_email" className="block text-sm font-medium text-dark-700 dark:text-light-300 mb-2">
                    Customer Email *
                  </label>
                  <input
                    type="email"
                    id="customer_email"
                    name="customer_email"
                    value={formData.customer_email}
                    onChange={handleChange}
                    className={`input ${
                      errors.customer_email ? 'border-red-300 dark:border-red-500 focus:border-red-500 focus:ring-red-500' : ''
                    }`}
                  />
                  {errors.customer_email && (
                    <p className="mt-1 text-sm text-red-600 dark:text-red-400">{errors.customer_email}</p>
                  )}
                </div>
                
                <div>
                  <label htmlFor="customer_phone" className="block text-sm font-medium text-dark-700 dark:text-light-300 mb-2">
                    Customer Phone *
                  </label>
                  <input
                    type="tel"
                    id="customer_phone"
                    name="customer_phone"
                    value={formData.customer_phone}
                    onChange={handleChange}
                    className={`input ${
                      errors.customer_phone ? 'border-red-300 dark:border-red-500 focus:border-red-500 focus:ring-red-500' : ''
                    }`}
                  />
                  {errors.customer_phone && (
                    <p className="mt-1 text-sm text-red-600 dark:text-red-400">{errors.customer_phone}</p>
                  )}
                </div>
              </div>
            </div>
            
            <div className="mb-8">
              <h2 className="text-xl font-semibold text-dark-900 dark:text-white mb-4">Delivery Information</h2>
              <div className="grid grid-cols-1 gap-6">
                <div className="mb-6">
                  <h3 className="text-lg font-semibold text-dark-900 dark:text-white mb-2">Select Delivery Location</h3>
                  <LocationPicker onSelect={(loc: SelectedLocation) => {
                    setFormData((prev) => ({
                      ...prev,
                      delivery_address: loc.address,
                      delivery_city: loc.city,
                      delivery_postal_code: loc.postal_code,
                      delivery_country: loc.country,
                      latitude: loc.latitude,
                      longitude: loc.longitude,
                    }));

                    setErrors((prev) => {
                      const newErrors = { ...prev };
                      delete newErrors.delivery_address;
                      delete newErrors.delivery_city;
                      delete newErrors.delivery_postal_code;
                      delete newErrors.delivery_country;
                      delete newErrors.latitude;
                      delete newErrors.longitude;
                      return newErrors;
                    });
                  }} />
                  {errors.latitude && (
                    <p className="mt-1 text-sm text-red-600 dark:text-red-400">{errors.latitude}</p>
                  )}
                  {errors.longitude && (
                    <p className="mt-1 text-sm text-red-600 dark:text-red-400">{errors.longitude}</p>
                  )}
                </div>
                
                <div>
                  <label htmlFor="delivery_address" className="block text-sm font-medium text-dark-700 dark:text-light-300 mb-2">
                    Delivery Address *
                  </label>
                  <input
                    type="text"
                    id="delivery_address"
                    name="delivery_address"
                    value={formData.delivery_address}
                    onChange={handleChange}
                    className={`input ${
                      errors.delivery_address ? 'border-red-300 dark:border-red-500 focus:border-red-500 focus:ring-red-500' : ''
                    }`}
                  />
                  {errors.delivery_address && (
                    <p className="mt-1 text-sm text-red-600 dark:text-red-400">{errors.delivery_address}</p>
                  )}
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div>
                    <label htmlFor="delivery_city" className="block text-sm font-medium text-dark-700 dark:text-light-300 mb-2">
                      City *
                    </label>
                    <input
                      type="text"
                      id="delivery_city"
                      name="delivery_city"
                      value={formData.delivery_city}
                      onChange={handleChange}
                      className={`input ${
                        errors.delivery_city ? 'border-red-300 dark:border-red-500 focus:border-red-500 focus:ring-red-500' : ''
                      }`}
                    />
                    {errors.delivery_city && (
                      <p className="mt-1 text-sm text-red-600 dark:text-red-400">{errors.delivery_city}</p>
                    )}
                  </div>
                  <div>
                    <label htmlFor="delivery_postal_code" className="block text-sm font-medium text-dark-700 dark:text-light-300 mb-2">
                      Postal Code *
                    </label>
                    <input
                      type="text"
                      id="delivery_postal_code"
                      name="delivery_postal_code"
                      value={formData.delivery_postal_code}
                      onChange={handleChange}
                      className={`input ${
                        errors.delivery_postal_code ? 'border-red-300 dark:border-red-500 focus:border-red-500 focus:ring-red-500' : ''
                      }`}
                    />
                    {errors.delivery_postal_code && (
                      <p className="mt-1 text-sm text-red-600 dark:text-red-400">{errors.delivery_postal_code}</p>
                    )}
                  </div>
                  <div>
                    <label htmlFor="delivery_country" className="block text-sm font-medium text-dark-700 dark:text-light-300 mb-2">
                      Country *
                    </label>
                    <input
                      type="text"
                      id="delivery_country"
                      name="delivery_country"
                      value={formData.delivery_country}
                      onChange={handleChange}
                      className={`input ${
                        errors.delivery_country ? 'border-red-300 dark:border-red-500 focus:border-red-500 focus:ring-red-500' : ''
                      }`}
                    />
                    {errors.delivery_country && (
                      <p className="mt-1 text-sm text-red-600 dark:text-red-400">{errors.delivery_country}</p>
                    )}
                  </div>
                </div>
              </div>
            </div>
            
            <div className="mb-8">
              <h2 className="text-xl font-semibold text-dark-900 dark:text-white mb-4">Parcel Information</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label htmlFor="parcel_size" className="block text-sm font-medium text-dark-700 dark:text-light-300 mb-2">
                    Parcel Size *
                  </label>
                  <select
                    id="parcel_size"
                    name="parcel_size"
                    value={formData.parcel_size}
                    onChange={handleChange}
                    className="input"
                  >
                    <option value="small">Small</option>
                    <option value="medium">Medium</option>
                    <option value="large">Large</option>
                  </select>
                </div>
                
                <div>
                  <label htmlFor="parcel_weight" className="block text-sm font-medium text-dark-700 dark:text-light-300 mb-2">
                    Weight (kg) *
                  </label>
                  <input
                    type="text"
                    id="parcel_weight"
                    name="parcel_weight"
                    value={formData.parcel_weight}
                    onChange={handleChange}
                    className={`input ${
                      errors.parcel_weight ? 'border-red-300 dark:border-red-500 focus:border-red-500 focus:ring-red-500' : ''
                    }`}
                  />
                  {errors.parcel_weight && (
                    <p className="mt-1 text-sm text-red-600 dark:text-red-400">{errors.parcel_weight}</p>
                  )}
                </div>
                
                <div className="flex items-center">
                  <input
                    type="checkbox"
                    id="is_fragile"
                    name="is_fragile"
                    checked={formData.is_fragile}
                    onChange={handleChange}
                    className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-light-300 dark:border-dark-600 rounded"
                  />
                  <label htmlFor="is_fragile" className="ml-2 block text-sm text-dark-700 dark:text-light-300">
                    Fragile Item
                  </label>
                </div>
              </div>
            </div>
            
            <div className="mb-8">
              <label htmlFor="delivery_notes" className="block text-sm font-medium text-dark-700 dark:text-light-300 mb-2">
                Delivery Notes
              </label>
              <textarea
                id="delivery_notes"
                name="delivery_notes"
                rows={3}
                value={formData.delivery_notes}
                onChange={handleChange}
                className="input"
                placeholder="Special instructions for the delivery"
              ></textarea>
            </div>
            
            <div className="flex justify-end space-x-4">
              <motion.button
                type="button"
                onClick={() => router.back()}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className="btn-outline"
              >
                Cancel
              </motion.button>
              <motion.button
                type="submit"
                disabled={loading}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className={`btn-primary ${
                  loading ? 'opacity-75 cursor-not-allowed' : ''
                }`}
              >
                {loading ? (
                  <span className="flex items-center justify-center">
                    <ClipLoader color="#ffffff" size={16} className="mr-2" />
                    Creating...
                  </span>
                ) : 'Create Order'}
              </motion.button>
            </div>
          </form>
        </motion.div>
      </motion.div>
    </ProtectedRoute>
  );
} 
 