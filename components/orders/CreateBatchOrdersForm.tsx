import React, { useState } from 'react';
import { useOrderContext } from '@/context/OrderContext';
import { Order } from '@/domain/entities/Order';
import { Consumer } from '@/domain/entities/Consumer';
import { Parcel } from '@/domain/entities/Parcel';

interface OrderFormData {
  consumer: {
    name: string;
    phone_number: string;
    email: string;
  };
  latest_time_of_arrival: string;
  parcel: {
    size: "small" | "medium" | "large";
    weight: number;
    dimensions: {
      length: number;
      width: number;
      height: number;
    };
    price: number;
    fragile: boolean;
  };
}

interface CreateBatchOrdersFormProps {
  onSuccess?: (orders: Order[]) => void;
}

export const CreateBatchOrdersForm: React.FC<CreateBatchOrdersFormProps> = ({ onSuccess }) => {
  const { createBatchOrders, loading, error } = useOrderContext();
  const [orders, setOrders] = useState<OrderFormData[]>([createEmptyOrderForm()]);
  const [formError, setFormError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  
  function createEmptyOrderForm(): OrderFormData {
    return {
      consumer: {
        name: '',
        phone_number: '',
        email: '',
      },
      latest_time_of_arrival: getDefaultDeliveryTime(),
      parcel: {
        size: "small",
        weight: 0,
        dimensions: {
          length: 0,
          width: 0,
          height: 0,
        },
        price: 0,
        fragile: false,
      }
    };
  }
  
  function getDefaultDeliveryTime(): string {
    const date = new Date();
    date.setHours(date.getHours() + 24); // Default to 24 hours from now
    return date.toISOString().slice(0, 16); // Format as YYYY-MM-DDTHH:MM
  }
  
  const addOrder = () => {
    setOrders([...orders, createEmptyOrderForm()]);
  };
  
  const removeOrder = (index: number) => {
    if (orders.length > 1) {
      setOrders(orders.filter((_, i) => i !== index));
    }
  };
  
  const updateOrder = (index: number, field: string, value: any) => {
    const updatedOrders = [...orders];
    
    // Handle nested fields
    const fieldParts = field.split('.');
    if (fieldParts.length === 1) {
      // @ts-ignore: Dynamic field access
      updatedOrders[index][field] = value;
    } else if (fieldParts.length === 2) {
      // @ts-ignore: Dynamic field access
      updatedOrders[index][fieldParts[0]][fieldParts[1]] = value;
    } else if (fieldParts.length === 3) {
      // @ts-ignore: Dynamic field access
      updatedOrders[index][fieldParts[0]][fieldParts[1]][fieldParts[2]] = value;
    }
    
    setOrders(updatedOrders);
  };
  
  const validateOrders = (): boolean => {
    for (let i = 0; i < orders.length; i++) {
      const order = orders[i];
      
      if (!order.consumer.name || !order.consumer.phone_number || !order.consumer.email) {
        setFormError(`Order #${i + 1}: All consumer fields are required`);
        return false;
      }
      
      if (!order.latest_time_of_arrival) {
        setFormError(`Order #${i + 1}: Delivery time is required`);
        return false;
      }
      
      const parcel = order.parcel;
      if (parcel.weight <= 0 || 
          parcel.dimensions.length <= 0 || 
          parcel.dimensions.width <= 0 || 
          parcel.dimensions.height <= 0 || 
          parcel.price <= 0) {
        setFormError(`Order #${i + 1}: All parcel details must be positive numbers`);
        return false;
      }
    }
    
    setFormError(null);
    return true;
  };
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setSuccessMessage(null);
    
    if (!validateOrders()) {
      return;
    }
    
    // Transform the form data to match the API expectations
    const ordersPayload = orders.map(order => ({
      consumer: {
        ...order.consumer,
        active_status: true,
        notification_ids: { items: [] }
      },
      latest_time_of_arrival: new Date(order.latest_time_of_arrival),
      parcel: {
        ...order.parcel,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      bill_id: '', // To be generated by the backend
      status: "PENDING" as const,
      delivery_job_id: '' // To be generated by the backend
    }));
    
    try {
      const result = await createBatchOrders(ordersPayload as any);
      if (result) {
        setSuccessMessage(`Successfully created ${result.length} orders`);
        setOrders([createEmptyOrderForm()]);
        if (onSuccess) {
          onSuccess(result);
        }
      }
    } catch (error) {
      setFormError('Failed to create orders. Please try again.');
    }
  };
  
  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h2 className="text-xl font-semibold mb-4">Create Multiple Orders</h2>
      
      {formError && (
        <div className="bg-red-50 text-red-600 p-3 rounded mb-4">
          {formError}
        </div>
      )}
      
      {error && (
        <div className="bg-red-50 text-red-600 p-3 rounded mb-4">
          {error}
        </div>
      )}
      
      {successMessage && (
        <div className="bg-green-50 text-green-600 p-3 rounded mb-4">
          {successMessage}
        </div>
      )}
      
      <form onSubmit={handleSubmit}>
        {orders.map((order, index) => (
          <div key={index} className="mb-8 p-4 border border-gray-200 rounded-md">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium">Order #{index + 1}</h3>
              {orders.length > 1 && (
                <button 
                  type="button"
                  onClick={() => removeOrder(index)}
                  className="text-red-500 hover:text-red-700"
                >
                  Remove
                </button>
              )}
            </div>
            
            <div className="mb-4">
              <h4 className="font-medium mb-2">Consumer Information</h4>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">Name</label>
                  <input
                    type="text"
                    value={order.consumer.name}
                    onChange={(e) => updateOrder(index, 'consumer.name', e.target.value)}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">Phone Number</label>
                  <input
                    type="tel"
                    value={order.consumer.phone_number}
                    onChange={(e) => updateOrder(index, 'consumer.phone_number', e.target.value)}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">Email</label>
                  <input
                    type="email"
                    value={order.consumer.email}
                    onChange={(e) => updateOrder(index, 'consumer.email', e.target.value)}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                    required
                  />
                </div>
              </div>
            </div>
            
            <div className="mb-4">
              <h4 className="font-medium mb-2">Delivery Information</h4>
              <div>
                <label className="block text-sm font-medium text-gray-700">Latest Time of Arrival</label>
                <input
                  type="datetime-local"
                  value={order.latest_time_of_arrival}
                  onChange={(e) => updateOrder(index, 'latest_time_of_arrival', e.target.value)}
                  className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                  required
                />
              </div>
            </div>
            
            <div className="mb-4">
              <h4 className="font-medium mb-2">Parcel Information</h4>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">Size</label>
                  <select
                    value={order.parcel.size}
                    onChange={(e) => updateOrder(index, 'parcel.size', e.target.value)}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                  >
                    <option value="small">Small</option>
                    <option value="medium">Medium</option>
                    <option value="large">Large</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">Weight (kg)</label>
                  <input
                    type="number"
                    min="0.1"
                    step="0.1"
                    value={order.parcel.weight}
                    onChange={(e) => updateOrder(index, 'parcel.weight', parseFloat(e.target.value))}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                    required
                  />
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">Length (cm)</label>
                  <input
                    type="number"
                    min="1"
                    value={order.parcel.dimensions.length}
                    onChange={(e) => updateOrder(index, 'parcel.dimensions.length', parseInt(e.target.value))}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">Width (cm)</label>
                  <input
                    type="number"
                    min="1"
                    value={order.parcel.dimensions.width}
                    onChange={(e) => updateOrder(index, 'parcel.dimensions.width', parseInt(e.target.value))}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700">Height (cm)</label>
                  <input
                    type="number"
                    min="1"
                    value={order.parcel.dimensions.height}
                    onChange={(e) => updateOrder(index, 'parcel.dimensions.height', parseInt(e.target.value))}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                    required
                  />
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">Price</label>
                  <input
                    type="number"
                    min="0.01"
                    step="0.01"
                    value={order.parcel.price}
                    onChange={(e) => updateOrder(index, 'parcel.price', parseFloat(e.target.value))}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                    required
                  />
                </div>
                
                <div className="flex items-center h-full pt-6">
                  <input
                    type="checkbox"
                    checked={order.parcel.fragile}
                    onChange={(e) => updateOrder(index, 'parcel.fragile', e.target.checked)}
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  />
                  <label className="ml-2 block text-sm text-gray-700">
                    Fragile
                  </label>
                </div>
              </div>
            </div>
          </div>
        ))}
        
        <div className="flex justify-between mt-6">
          <button
            type="button"
            onClick={addOrder}
            className="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Add Another Order
          </button>
          
          <button
            type="submit"
            disabled={loading}
            className={`inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 ${
              loading ? 'opacity-75 cursor-not-allowed' : ''
            }`}
          >
            {loading ? 'Creating Orders...' : 'Create Orders'}
          </button>
        </div>
      </form>
    </div>
  );
}; 