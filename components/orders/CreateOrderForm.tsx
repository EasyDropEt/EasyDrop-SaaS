import React, { useState } from 'react';
import { useOrderContext } from '@/context/OrderContext';
import { Order } from '@/domain/entities/Order';
import { Consumer } from '@/domain/entities/Consumer';
import { Parcel } from '@/domain/entities/Parcel';

interface CreateOrderFormProps {
  businessId: string;
  onSuccess?: (order: Order) => void;
}

export const CreateOrderForm: React.FC<CreateOrderFormProps> = ({ 
  businessId,
  onSuccess 
}) => {
  const { createOrder, loading, error } = useOrderContext();
  const [formError, setFormError] = useState<string | null>(null);

  // Consumer form state
  const [consumer, setConsumer] = useState<Omit<Consumer, 'id' | 'notification_ids'>>({
    name: '',
    email: '',
    phone_number: '',
    active_status: true
  });

  // Parcel form state
  const [parcel, setParcel] = useState<Omit<Parcel, 'id' | 'createdAt' | 'updatedAt'>>({
    size: 'small',
    weight: 0,
    dimensions: {
      length: 0,
      width: 0,
      height: 0
    },
    price: 0,
    fragile: false
  });

  // Order form state
  const [latestTimeOfArrival, setLatestTimeOfArrival] = useState<string>('');

  const handleConsumerChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type, checked } = e.target;
    setConsumer(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const handleParcelChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value, type, checked } = e.target as HTMLInputElement;
    
    if (name.includes('.')) {
      const [parent, child] = name.split('.');
      setParcel(prev => ({
        ...prev,
        [parent]: {
          ...prev[parent as keyof typeof prev] as object,
          [child]: type === 'number' ? parseFloat(value) : value
        }
      }));
    } else {
      setParcel(prev => ({
        ...prev,
        [name]: type === 'checkbox' 
          ? checked 
          : type === 'number' 
            ? parseFloat(value) 
            : value
      }));
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setFormError(null);

    // Validate form
    if (!consumer.name || !consumer.email || !consumer.phone_number) {
      setFormError('Please fill in all consumer fields');
      return;
    }

    if (parcel.weight <= 0 || 
      !parcel.dimensions?.length || 
      !parcel.dimensions?.width || 
      !parcel.dimensions?.height || 
      parcel.dimensions?.length <= 0 ||
      parcel.dimensions?.width <= 0 || 
      parcel.dimensions?.height <= 0) {
      setFormError('Please enter valid parcel dimensions and weight');
      return;
  }

    if (!latestTimeOfArrival) {
      setFormError('Please select a delivery time');
      return;
    }

    try {
      // Create a new order object
      const newOrderData: Omit<Order, 'id'> = {
        consumer: {
          ...consumer,
          id: '', // This will be generated by the backend
          notification_ids: { items: [] }
        },
        parcel: {
          ...parcel,
          id: '', // This will be generated by the backend
          createdAt: new Date(),
          updatedAt: new Date()
        },
        bill_id: '', // This will be generated by the backend
        latest_time_of_arrival: new Date(latestTimeOfArrival),
        status: 'PENDING',
        delivery_job_id: '' // This will be generated by the backend
      };

      const createdOrder = await createOrder(newOrderData);
      
      if (createdOrder && onSuccess) {
        onSuccess(createdOrder);
      }
    } catch (err) {
      setFormError('Failed to create order. Please try again.');
      console.error(err);
    }
  };

  return (
    <div className="bg-white shadow-md rounded-lg p-6">
      <h2 className="text-2xl font-bold mb-6">Create New Order</h2>
      
      {(formError || error) && (
        <div className="bg-red-50 text-red-500 p-4 mb-6 rounded">
          {formError || error}
        </div>
      )}
      
      <form onSubmit={handleSubmit}>
        <div className="mb-6">
          <h3 className="text-lg font-semibold mb-3">Consumer Information</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Name</label>
              <input
                type="text"
                name="name"
                value={consumer.name}
                onChange={handleConsumerChange}
                className="w-full p-2 border rounded"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Email</label>
              <input
                type="email"
                name="email"
                value={consumer.email}
                onChange={handleConsumerChange}
                className="w-full p-2 border rounded"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Phone Number</label>
              <input
                type="tel"
                name="phone_number"
                value={consumer.phone_number}
                onChange={handleConsumerChange}
                className="w-full p-2 border rounded"
                required
              />
            </div>
          </div>
        </div>

        <div className="mb-6">
          <h3 className="text-lg font-semibold mb-3">Parcel Information</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Size</label>
              <select
                name="size"
                value={parcel.size}
                onChange={handleParcelChange}
                className="w-full p-2 border rounded"
                required
              >
                <option value="small">Small</option>
                <option value="medium">Medium</option>
                <option value="large">Large</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Weight (kg)</label>
              <input
                type="number"
                name="weight"
                value={parcel.weight}
                onChange={handleParcelChange}
                min="0.1"
                step="0.1"
                className="w-full p-2 border rounded"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Length (cm)</label>
              <input
                type="number"
                name="dimensions.length"
                value={parcel.dimensions?.length ?? 0}
                onChange={handleParcelChange}
                min="1"
                className="w-full p-2 border rounded"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Width (cm)</label>
              <input
                type="number"
                name="dimensions.width"
                value={parcel.dimensions?.width ?? 0}
                onChange={handleParcelChange}
                min="1"
                className="w-full p-2 border rounded"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Height (cm)</label>
              <input
                type="number"
                name="dimensions.height"
                value={parcel.dimensions?.height ?? 0}
                onChange={handleParcelChange}
                min="1"
                className="w-full p-2 border rounded"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Price ($)</label>
              <input
                type="number"
                name="price"
                value={parcel.price}
                onChange={handleParcelChange}
                min="0"
                step="0.01"
                className="w-full p-2 border rounded"
                required
              />
            </div>
            <div className="flex items-center">
              <input
                type="checkbox"
                name="fragile"
                checked={parcel.fragile}
                onChange={handleParcelChange}
                className="mr-2"
              />
              <label className="text-sm font-medium">Fragile</label>
            </div>
          </div>
        </div>

        <div className="mb-6">
          <h3 className="text-lg font-semibold mb-3">Delivery Information</h3>
          <div>
            <label className="block text-sm font-medium mb-1">Latest Time of Arrival</label>
            <input
              type="datetime-local"
              value={latestTimeOfArrival}
              onChange={(e) => setLatestTimeOfArrival(e.target.value)}
              className="w-full p-2 border rounded"
              required
            />
          </div>
        </div>

        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:bg-blue-300"
          >
            {loading ? 'Creating...' : 'Create Order'}
          </button>
        </div>
      </form>
    </div>
  );
}; 